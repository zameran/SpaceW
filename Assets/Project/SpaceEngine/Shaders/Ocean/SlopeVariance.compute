// Procedural planet generator.
// 
// Copyright (C) 2015-2023 Denis Ovchinnikov [zameran] 
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. Neither the name of the copyright holders nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
// THE POSSIBILITY OF SUCH DAMAGE.
// 
// Creation Date: Undefined
// Creation Time: Undefined
// Creator: zameran

/*
 * Proland: a procedural landscape rendering library.
 * Copyright (c) 2008-2011 INRIA
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Proland is distributed under a dual-license scheme.
 * You can obtain a specific license from Inria: proland-licensing@inria.fr.
 */

 /*
 * Authors: Eric Bruneton, Antoine Begault, Guillaume Piolat.
 * Modified and ported to Unity by Justin Hawkins 2014
 * Modified by Denis Ovchinnikov 2015-2023
 */

#if !defined (MATH)
#include "../Math.cginc"
#endif

#pragma kernel CSMain

Texture2D _Spectrum01;
Texture2D _Spectrum23;

float4 _GridSizes;

float _SlopeVarianceDelta;
float _Size;
float _VarianceSize;

RWTexture3D<float> des;

float GetSlopeVariances(float2 k, float A, float B, float C, float2 spectrumSample) 
{
    float w = 1.0 - exp(A * k.x * k.x + B * k.x * k.y + C * k.y * k.y);
    float2 kw = k * w;

    return dot(kw, kw) * dot(spectrumSample, spectrumSample) * 2.0;
}

[numthreads(4,4,4)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    const float SCALE = 10.0;
    
    float a = id.x;
    float b = id.y;
    float c = id.z;
    
    float A = pow(a / (_VarianceSize - 1.0), 4.0) * SCALE;
    float C = pow(c / (_VarianceSize - 1.0), 4.0) * SCALE;
    float B = (2.0 * b / (_VarianceSize - 1.0) - 1.0) * sqrt(A * C);

    A = -0.5 * A;
    B = -B;
    C = -0.5 * C;
    
    float slopeVariances = _SlopeVarianceDelta;
    
    int size = _Size;

    for (int x = 0; x < size; x++) 
    {
        for (int y = 0; y < size; y++)
         {
            int i = x >= _Size / 2.0 ? x - size : x;
            int j = y >= _Size / 2.0 ? y - size : y;

            float2 k = M_PI2 * float2(i, j);

            float4 spectrum01 = _Spectrum01[uint2(x,y)];
            float4 spectrum23 = _Spectrum23[uint2(x,y)];

            slopeVariances += GetSlopeVariances(k / _GridSizes.x, A, B, C, spectrum01.xy);
            slopeVariances += GetSlopeVariances(k / _GridSizes.y, A, B, C, spectrum01.zw);
            slopeVariances += GetSlopeVariances(k / _GridSizes.z, A, B, C, spectrum23.xy);
            slopeVariances += GetSlopeVariances(k / _GridSizes.w, A, B, C, spectrum23.zw);
        }
    }
     
    des[id] = slopeVariances;
}